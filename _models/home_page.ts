import { ContentItem, Elements } from '@kentico/kontent-delivery';
import { Client } from '@/api/Kontent/client.js';
import { takeUntil } from 'rxjs/operators';
// import BaseStore from '@/store/base';

/**
 * Generated by '@kentico/kontent-model-generator@3.1.0'
 * Timestamp: Wed Feb 12 2020 15:35:02 GMT-0500 (Eastern Standard Time)
 *
 * Tip: You can replace 'ContentItem' with another generated class to fully leverage strong typing.
 */
export class HomePage extends ContentItem {
  public aboutTitle: Elements.TextElement;
  public aboutDescription: Elements.RichTextElement;
  public aboutImage: Elements.AssetsElement;
  public heroImage: Elements.AssetsElement;
  public pageTitle: Elements.RichTextElement;
  public promos: Elements.RichTextElement;
  public heroButtons: Elements.LinkedItemsElement<ContentItem>;
  constructor() {
    super({
      propertyResolver: (elementName: string) => {
        if (elementName === 'about_title') {
          return 'aboutTitle';
        }
        if (elementName === 'about_description') {
          return 'aboutDescription';
        }
        if (elementName === 'about_image') {
          return 'aboutImage';
        }
        if (elementName === 'hero_image') {
          return 'heroImage';
        }
        if (elementName === 'page_title') {
          return 'pageTitle';
        }
        if (elementName === 'hero_buttons') {
          return 'heroButtons';
        }
        return elementName;
      }
    });
  }
}

const fetchFromCMS = codeName => {
  console.log(`codName > ${codeName}`);
  // if (localStorage.topic !== undefined) {
  //   content = JSON.parse(localStorage.topic);
  //   this.notifyChange();
  // } else {
  // debugger;

  let query = Client.item(codeName).depthParameter(10);

  query
    .toObservable()
    .pipe(takeUntil(this.observableUnsubscribe))
    .subscribe(response => {
      const content = response.item;
      this.notifyChange();
    });
  // }
};
Client.items<HomePage>()
  .type('home_page')
  .toObservable()
  .subscribe(response => {
    debugger;
    const movieText = response.items[0].title.value;
  });
